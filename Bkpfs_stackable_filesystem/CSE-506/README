********
FILES NEEDED
******
Please use the following files for running the testcases on the designed bkpfs.
CSE-506/bkpctl
CSE-506/test_scripts/final.sh
fs/bkpfs/*
fs/Kconfig
fs/Makefile
include/uapi/linux/magic.h
Test_scripts log file
CSE-506/test_scripts/log_file
*********
BACKUP FILE SYSTEM
*********
Several file systems have different purposes and each filesystem has specific 
use. My design for this backup file system is to take the backups only when the
user is writing to a file. Since the user can open the file for several
purposes and writes into back only some times, this filesystem is efficient to 
take the backups of the files.If the user is opening the file and not writing,
then the back up is not created. Basically, if the file is not opened for 
writing, then the bkpfs doesn't create any backup. In general, users can append 
the file with the code changes and some times, they might have deleted the 
original file. Even such a case, I'm holding those backups and the users can 
retrieve those backups from the original folder. To increase the space 
efficiency, I'm deleteing the backups if the backups has reached certain limit 
as user can specify the maxver number while using mount.For the creation of the
backup file, I have created a negative dentry and then by using vfs_create, I 
have create the dentry in the lower file system and then used dentry_open to 
create a backup. For deletion of the backup file in versioning, I have used 
vfs_unlink for deletion of the file. I have used extended min attributes and 
max attributes for the file for min_version and max_version so that each file when 
it is created in bkpfs filesystem, they will be created. 
I have written the following functions for this:
1)alloc_add
2)get_attr
3)set_attr
4)bkp_create
5)bkp_bakcup
6)bkp_delete
The description of the functions is given at the end in README for all functions.
********
WHAT TO BACKUP?
********
Since the file system is efficient for frequently modifying files and to hold
the backup, it's better to take the backup for regular files. I used S_ISREG 
to check whether the file is regular or not and then checked the mode of the 
file whether it is opened for WRITE.

********
WHERE TO STORE THE BACKUP
********
For a given file in the upper file system, I'm storing the backup file in the 
same folder but making invisible to access in any form such as `ls <filename>`
 and `cat <filename>`. I'm storing the backups with the following names. 

.bkp.<filename>.<number>
The number is an integer which will be incremented whenever you are opening the 
file for writing and update the file. 
This naming convention is decent so that the user will get to know which one is
the latest backup. Moreover, the no of the backups will not more than 32 bit 
integer.
For example, when the user has removed the files, then the number starts again 
from 0. In case if the user is in need of the old backup file, user can retrieve
the file by checking in the lower file system. New back up file starts from 0
and overwrites the old backup files if any by truncating them. 
 
*********
EFFICIENT WAY TO BACK UP THE FILE
********
To create a backup of file, I have used the vfs_copy_file_range for taking the 
back up file. Internally, it is calling the following functions:
do_splice_direct
splice_direct_to_actor
do_splice_to
splice_read
default_file_splice_read
Directly, by sending the size of the file, I can create a backup. 
This is an efficient way to create a backup. 

*******
VERSIONING POLICY
*******
I have added two versions max_version and min_version. 
Whenever the max_version - min_version == 10. 
Then the file with min_version is deleted and then the min_version.
When ever you are setting the max_version for the first time, I'm setting the 
min_version as well. From there, the max_version will be incremented and when 
it reaches 11 i.e whenever the max_version - min_version == 10, then the 
min_version with 1 is deleted. Then the file with min_version is deleted and 
then the min_version.
Set attributes and get attributes were used for setting and getting attributes.
For example, let's say the max version = 3. I have written the file five times. 

Then the lower file system contains.

.bkp.test.4
.bkp.test.5
.bkp.test.6

Suppose, if I removed the files rm -rf /mnt/bkpfs/test. Then these files still 
exist like same as snapshot in server. Incase if the user accidentally deleted
these files, he can retrieve for all the previous backup files. When the new 
file "test" got created, then you can use .bkp.test.1 and 4/5/6 will be 
overwritten when the file is written 6 times. I have implemented all the 
necessary functionalities as specified in hw2.txt and tested them using the 
test_scripts.

**********
Justification for the extended attributes
********
Whatever you put in the void* private is only kept around for the lifetime of 
the inode (or dentry, superblock, etc.) IN MEMORY only.  
Nothing gets persisted automatically unless you explicitly write it, or use an
API that guarantees it'll be written out (e.g., vfs_write, an extended 
attribute, etc.).So, I have gone ahead with the xtended attributes.
*********
VISIBILITY POLICY
********
Backup versions of files are not visible to users or accessible by default.
I have added the function "bkpfs_filldir" in lookup.c and used strsep fucntion to 
check for the filename and disabled the visibility through ls as well as ls -a. 
In addition to this, I have updated the function "bkpfs_lookup" function in lookup.c 
such that the listing of the files through other means like "cat <filename>" in the upper
file system is disabled.

*********
RETENTION POLICY
********
A file should have a maximum of N backups available.
User can set the max version through the following command when using mount. 
*********mount command for setting the maxversion*****
mount -t bkpfs -o maxver=5 /test/HW2_v6/ /mnt/bkpfs
******************************************************
This means if the user need to create another backup, say N+1, 
I have designed a file system in a way that it deletes oldest backup file for the file 
to make room for the new one. 
To set the maxver in the mount options, I have added the function "bkpfs_parse_options" in
lookup.c so that user can process the max version for this variable. 
I have designed a file system to keep N most recent backups, and delete the 
oldest one(s). 
**********
VERSION MANAGEMENT
**********
I have performed the version management in such a way that user can interact with my file system
through ioctl. I have written the user level C function such that it can support the following operations.
I have used the following functions for ioctl.
1)bkp_delete_ioctl
2)bkp_restore
3)bkp_read
I have used the IOCTL commands to add an external io interface to interact with
my file system. 
Please find the usage below for 4 differnt things:
*************
LISTING the backup files
************
./bkpctl -l <filename>
************
DELETING the backup files
***********
./bkpctl -d newest <filename>
./bkpctl -d oldest <filename>
./bkpctl -d all <filename>

***********
VIEWING the backup files
************
./bkpctl -v newest <filename>
./bkpctl -v oldest <filename>
./bkpctl -v N <filename>

**********
RESTORING the backup files
**********
./bkpctl -r newest <filename>
./bkpctl -r oldest <filename>
./bkpctl -r N <filename>

The functionalities are implemented as specified in the hw2.txt. 
Particularly, for restore, I'm overwriting the original file by using 
vfs_truncate and vfs_copy_file_range and the backup file content is copied to 
the original file. Rest, deletion, listing and viewing the contents are 
implemented as per the specifications in hw2.txt.
I have tested for all the valid cases in which the backup file exists. Please
consider that this filesystem has an efficient ioctl interface. For example: if 
the backup file doesn't exists. It shows that "Requested backup file doesn't exist"
Inaddition to returning ENOENT for the request in which doesn't exist. 

********
[root@vl52 CSE-506]# ./bkpctl -l /mnt/bkpfs/a
listing all the versions:
.bkp.a.1

[root@vl52 CSE-506]# ./bkpctl -v 10 /mnt/bkpfs/a
Requested backup file doesn't exist
Use ./bkpctl -l <filename> to list the versions

[root@vl52 CSE-506]# ./bkpctl -v 2 /mnt/bkpfs/a
Requested backup file doesn't exist
Use ./bkpctl -l <filename> to list the versions

[root@vl52 CSE-506]# ./bkpctl -v 1 /mnt/bkpfs/a
versioning
a
The content of the file here in this case is "a".

This is user friendly and user can understand the issue if the arguments are 
not properly sent to kernel. 
**********

*****************
FUNCTIONS DESCRIPTION
**************

alloc_add: 
 	 fucntion to create the negative dentry

bkp_create:
	 function for the creation of the backup file

bkp_delete_ioctl:
	 function for the deletion of the backup file through ioctl
         It takes care of four things. 
	     1)when min and max version are same, removes the attributes
	     2)when newest, decrements the max version
	     3)when oldest, increments the min version
	     4)all, removes all the backup files and remove the attributes	

bkp_delete:  
	function for the deletion of the backup file for space retention
 	policy. when user is mounting, user need to set version. So, when the
	 backups count between the max and min is greater than
 	the user set version. It will automatically delete the oldest version
        and increments the min version as per the policy.

attr_get:
	function to get the attributes

attr_set:
        function to set the attributes

bkpfs_backup:
        main function which is used for the creation as well as the 
        deletion of the oldest back up file as per the policy.

bkpfs_filldir:
	 function is updated for not listing the backup files in ls.
	 The following function has been taken from ecryptfs 
	 and modified to hide the files even to use ls -a in the 
         higher level system. You can see the files by performing
         ls -a in lower file system.

bkp_restore:
       function to restore the file i.e backup file is being copied to the 
       original file

bkp_read:
          function to view the file as per the request mainly used for reading
	   the ioctl

***********
TEST SCRIPTS
**********
Please run make in bkpfs folder and then in CSE506 folder run make  to generate
bkpctl.Once you have generated these two files, you can run the following
commands by giving proper path to the bkpfs.ko file. 

insmod bkpfs.ko
mount -t bkpfs -o maxver=5 /test/HW2_v6/ /mnt/bkpfs

I have written the written the test cases and kept in test_scripts folder. 
Please find the description and the usage of the test scripts.

source test_scripts/final.sh 

TEST_SCRIPTS DESCRIPTION
I have given the log file below:
test_scripts/log_file

test01.sh
******************************
Testing for the backups whether the backups are hiding
*********************************

test02.sh
******************************
Testing whether the backups are created in lower file system
*********************************

test03.sh
******************************
Testing for the content of the newest RESTORE BACKUP  FILE
*********************************
******************************
Testing for the content of any number RESTORE BACKUP  FILE
*********************************
******************************
Testing for the content of the oldest RESTORE BACKUP  FILE
*********************************
******************************
Testing for the content of number 3 RESTORE BACKUP  FILE
*********************************
******************************
Testing for the content of number 2 RESTORE BACKUP  FILE
*********************************

test04.sh
******************************
Test case for the content of butone backup file 
******************************

test05.sh
******************************
Test case for Number of backups 
******************************


test06.sh
******************************
IOCTL Test case for Listing the backups 
******************************

test07.sh
******************************
IOCTL Test case for Deleting the newest backup 
******************************

test08.sh
******************************
IOCTL Test case for Deleting the oldest backup 
******************************

test09.sh
******************************
IOCTL Test case for Deleting the all the backup 
******************************


test10.sh
******************************
Testing for the content of the latest backup file with medium size
*********************************

test11.sh
******************************
Testing for the content of the latest backup file with large size
*********************************

test12.sh
******************************
Testing for the content of the latest backup file with empty size
*********************************

test13.sh
******************************
Testing for the content of the latest backup file
*********************************

test14.sh
******************************
Testing for the content of the newest VIEWING BACKUP  FILE
*********************************


test15.sh
******************************
Testing for the content of the oldest VIEWING BACKUP  FILE
*********************************

test16.sh
******************************
Testing for the content of the valid version VIEWING BACKUP  FILE
*********************************







******
REFERENCES
*****
Kernel functions information
https://elixir.bootlin.com/linux/v4.20.6/source/
Hashing in Kernel level
https://elixir.bootlin.com/linux/v4.20.6/source/security/keys/encrypted-keys/encrypted.c#L325
Errors
http://www-numi.fnal.gov/offline_software/srt_public_context/Web    Docs/Errors/unix_system_errors.html
Debugging
https://elinux.org/Debugging_by_printing
Linux Journal
https://www.linuxjournal.com/article/6930
Stack over flow
https://stackoverflow.com/questions/25518061/linux-filp-open-error-number-definitions/25518355
https://stackoverflow.com/questions/2450845/what-does-this-error-mean-somefile-c200-error-the-frame-size-of-1032-bytes
https://stackoverflow.com/questions/19598497/check-if-a-folder-is-writable
https://stackoverflow.com/questions/24290273/check-if-input-file-is-a-valid-file-in-c
