-----------
sys_cpenc.c
-----------
WARNING: line over 80 characters
#18: FILE: sys_cpenc.c:18:
+long int file_read(struct file *file,  char *data, unsigned long size, unsigned long long offset);

WARNING: Prefer 'long' over 'long int' as the int is unnecessary
#18: FILE: sys_cpenc.c:18:
+long int file_read(struct file *file,  char *data, unsigned long size, unsigned long long offset);

WARNING: externs should be avoided in .c files
#18: FILE: sys_cpenc.c:18:
+long int file_read(struct file *file,  char *data, unsigned long size, unsigned long long offset);

WARNING: line over 80 characters
#19: FILE: sys_cpenc.c:19:
+long int file_write(struct file *file,  char *data, unsigned long size, unsigned long long offset);

WARNING: Prefer 'long' over 'long int' as the int is unnecessary
#19: FILE: sys_cpenc.c:19:
+long int file_write(struct file *file,  char *data, unsigned long size, unsigned long long offset);

WARNING: externs should be avoided in .c files
#19: FILE: sys_cpenc.c:19:
+long int file_write(struct file *file,  char *data, unsigned long size, unsigned long long offset);

WARNING: line over 80 characters
#22: FILE: sys_cpenc.c:22:
+		*MD5_hash          performs the hashing of the user passed key in kernel

WARNING: Block comments should align the * on each line
#22: FILE: sys_cpenc.c:22:
+/*
+		*MD5_hash          performs the hashing of the user passed key in kernel

WARNING: line over 80 characters
#23: FILE: sys_cpenc.c:23:
+		*                  It uses crypto_shash_digest function for which the tfm

WARNING: line over 80 characters
#27: FILE: sys_cpenc.c:27:
+		*@digest_hash_key: output of the MD5 hashing stored in the digest_hash_key

ERROR: "foo* bar" should be "foo *bar"
#30: FILE: sys_cpenc.c:30:
+int MD5_hash(char* user_key, int user_keylen, char* digest_hash_key) {

ERROR: "foo* bar" should be "foo *bar"
#30: FILE: sys_cpenc.c:30:
+int MD5_hash(char* user_key, int user_keylen, char* digest_hash_key) {

ERROR: open brace '{' following function definitions go on the next line
#30: FILE: sys_cpenc.c:30:
+int MD5_hash(char* user_key, int user_keylen, char* digest_hash_key) {

WARNING: line over 80 characters
#32: FILE: sys_cpenc.c:32:
+		struct crypto_shash* shash_crypto = (struct crypto_shash*)crypto_alloc_shash("md5", 0, CRYPTO_ALG_ASYNC);

ERROR: "(foo*)" should be "(foo *)"
#32: FILE: sys_cpenc.c:32:
+		struct crypto_shash* shash_crypto = (struct crypto_shash*)crypto_alloc_shash("md5", 0, CRYPTO_ALG_ASYNC);

ERROR: "foo* bar" should be "foo *bar"
#32: FILE: sys_cpenc.c:32:
+		struct crypto_shash* shash_crypto = (struct crypto_shash*)crypto_alloc_shash("md5", 0, CRYPTO_ALG_ASYNC);

WARNING: Missing a blank line after declarations
#34: FILE: sys_cpenc.c:34:
+		SHASH_DESC_ON_STACK(desc, tfm);
+		if (!shash_crypto || IS_ERR(shash_crypto)) {

WARNING: suspect code indent for conditional statements (16, 20)
#34: FILE: sys_cpenc.c:34:
+		if (!shash_crypto || IS_ERR(shash_crypto)) {
+		    retval = (int)PTR_ERR(shash_crypto);

WARNING: Statements should start on a tabstop
#36: FILE: sys_cpenc.c:36:
+		    return retval;

WARNING: line over 80 characters
#40: FILE: sys_cpenc.c:40:
+		retval = crypto_shash_digest(desc, user_key, user_keylen, digest_hash_key);

WARNING: line over 80 characters
#46: FILE: sys_cpenc.c:46:
+		*copy_fs - perform copy operation of the file pointed by fd_in and writes

WARNING: Block comments should align the * on each line
#46: FILE: sys_cpenc.c:46:
+/*
+		*copy_fs - perform copy operation of the file pointed by fd_in and writes

WARNING: line over 80 characters
#55: FILE: sys_cpenc.c:55:
+int copy_fs(struct file *fd_in, struct file *fd_out, char *data, struct kstat *stat)

WARNING: Missing a blank line after declarations
#61: FILE: sys_cpenc.c:61:
+		mm_segment_t old_fs;
+		old_fs = get_fs();

WARNING: line over 80 characters
#64: FILE: sys_cpenc.c:64:
+			bytes_read = vfs_read(fd_in, data, BUF_SIZE, &fd_in->f_pos);

WARNING: suspect code indent for conditional statements (24, 28)
#65: FILE: sys_cpenc.c:65:
+			if (bytes_read < 0) {
+			    retval = -EINTR;

WARNING: Statements should start on a tabstop
#68: FILE: sys_cpenc.c:68:
+			    return retval;

WARNING: suspect code indent for conditional statements (24, 28)
#70: FILE: sys_cpenc.c:70:
+			if (bytes_read < BUF_SIZE) {
+			    read_flag = false;

WARNING: braces {} are not necessary for single statement blocks
#70: FILE: sys_cpenc.c:70:
+			if (bytes_read < BUF_SIZE) {
+			    read_flag = false;
+			}

WARNING: line over 80 characters
#73: FILE: sys_cpenc.c:73:
+			bytes_write = vfs_write(fd_out, data, bytes_read, &fd_out->f_pos);

WARNING: suspect code indent for conditional statements (24, 28)
#74: FILE: sys_cpenc.c:74:
+			if (bytes_read != bytes_write) {
+			    retval = -EINTR;

WARNING: Statements should start on a tabstop
#77: FILE: sys_cpenc.c:77:
+			    return retval;

WARNING: printk() should include KERN_<LEVEL> facility level
#81: FILE: sys_cpenc.c:81:
+		printk("fd_out->f_pos %llu \n", fd_out->f_pos);

WARNING: unnecessary whitespace before a quoted newline
#81: FILE: sys_cpenc.c:81:
+		printk("fd_out->f_pos %llu \n", fd_out->f_pos);

WARNING: suspect code indent for conditional statements (16, 20)
#82: FILE: sys_cpenc.c:82:
+		if (fd_out->f_pos != (stat->size)) {
+		    printk(KERN_ERR "issue in writing in copy");

WARNING: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#83: FILE: sys_cpenc.c:83:
+		    printk(KERN_ERR "issue in writing in copy");

WARNING: line over 80 characters
#86: FILE: sys_cpenc.c:86:
+		printk("Output of file_read---> %ld  and fd_in->f_pos-----> %llu \n", bytes_write, fd_out->f_pos);

WARNING: printk() should include KERN_<LEVEL> facility level
#86: FILE: sys_cpenc.c:86:
+		printk("Output of file_read---> %ld  and fd_in->f_pos-----> %llu \n", bytes_write, fd_out->f_pos);

WARNING: unnecessary whitespace before a quoted newline
#86: FILE: sys_cpenc.c:86:
+		printk("Output of file_read---> %ld  and fd_in->f_pos-----> %llu \n", bytes_write, fd_out->f_pos);

WARNING: line over 80 characters
#91: FILE: sys_cpenc.c:91:
+		*encrypt_fs - perform encryption of the file pointed by fd_in and writes

WARNING: Block comments should align the * on each line
#91: FILE: sys_cpenc.c:91:
+/*
+		*encrypt_fs - perform encryption of the file pointed by fd_in and writes

WARNING: line over 80 characters
#102: FILE: sys_cpenc.c:102:
+int encrypt_fs(struct file *fd_in, struct file *fd_out, char *data, struct kstat *stat, struct skcipher_request *req, struct scatterlist sg, char *hash_key, char *ivdata)

WARNING: Missing a blank line after declarations
#108: FILE: sys_cpenc.c:108:
+		mm_segment_t old_fs;
+		old_fs = get_fs();

WARNING: suspect code indent for conditional statements (16, 20)
#111: FILE: sys_cpenc.c:111:
+		if (bytes_write < 0) {
+		    retval = -EINTR;

WARNING: Statements should start on a tabstop
#114: FILE: sys_cpenc.c:114:
+		    return retval;

WARNING: suspect code indent for conditional statements (16, 20)
#117: FILE: sys_cpenc.c:117:
+		if (bytes_write < 0) {
+		    retval = -EINTR;

WARNING: Statements should start on a tabstop
#120: FILE: sys_cpenc.c:120:
+		    return retval;

WARNING: suspect code indent for conditional statements (16, 20)
#122: FILE: sys_cpenc.c:122:
+		while (read_flag) {
+		    bytes_read = vfs_read(fd_in, data, BUF_SIZE, &fd_in->f_pos);

WARNING: Statements should start on a tabstop
#124: FILE: sys_cpenc.c:124:
+		    if (bytes_read < 0) {

WARNING: Statements should start on a tabstop
#128: FILE: sys_cpenc.c:128:
+		    }

WARNING: line over 80 characters
#130: FILE: sys_cpenc.c:130:
+		    skcipher_request_set_crypt(req, &sg, &sg, bytes_read, ivdata);

WARNING: Statements should start on a tabstop
#132: FILE: sys_cpenc.c:132:
+		    if (retval) {

WARNING: Statements should start on a tabstop
#135: FILE: sys_cpenc.c:135:
+		    }

WARNING: Statements should start on a tabstop
#136: FILE: sys_cpenc.c:136:
+		    if (bytes_read < BUF_SIZE) {

WARNING: braces {} are not necessary for single statement blocks
#136: FILE: sys_cpenc.c:136:
+		    if (bytes_read < BUF_SIZE) {
+			read_flag = false;
+		    }

WARNING: Statements should start on a tabstop
#138: FILE: sys_cpenc.c:138:
+		    }

WARNING: line over 80 characters
#139: FILE: sys_cpenc.c:139:
+		    bytes_write = vfs_write(fd_out, data, bytes_read, &fd_out->f_pos);

WARNING: Statements should start on a tabstop
#140: FILE: sys_cpenc.c:140:
+		    if (bytes_write != bytes_read) {

WARNING: Statements should start on a tabstop
#144: FILE: sys_cpenc.c:144:
+		    }

WARNING: suspect code indent for conditional statements (16, 20)
#147: FILE: sys_cpenc.c:147:
+		if (fd_out->f_pos != (stat->size + 32)) {
+		    printk(KERN_ERR "issue in writing in encryption");

WARNING: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#148: FILE: sys_cpenc.c:148:
+		    printk(KERN_ERR "issue in writing in encryption");

WARNING: Statements should start on a tabstop
#150: FILE: sys_cpenc.c:150:
+		    return retval;

WARNING: line over 80 characters
#152: FILE: sys_cpenc.c:152:
+		printk("Output of file_read---> %ld  and fd_in->f_pos-----> %llu \n", bytes_write, fd_out->f_pos);

WARNING: printk() should include KERN_<LEVEL> facility level
#152: FILE: sys_cpenc.c:152:
+		printk("Output of file_read---> %ld  and fd_in->f_pos-----> %llu \n", bytes_write, fd_out->f_pos);

WARNING: unnecessary whitespace before a quoted newline
#152: FILE: sys_cpenc.c:152:
+		printk("Output of file_read---> %ld  and fd_in->f_pos-----> %llu \n", bytes_write, fd_out->f_pos);

WARNING: line over 80 characters
#157: FILE: sys_cpenc.c:157:
+		*decrypt_fs - perform decryption of the file pointed by fd_in and writes

WARNING: Block comments should align the * on each line
#157: FILE: sys_cpenc.c:157:
+/*
+		*decrypt_fs - perform decryption of the file pointed by fd_in and writes

WARNING: line over 80 characters
#167: FILE: sys_cpenc.c:167:
+int decrypt_fs(struct file *fd_in, struct file *fd_out, char *data, struct kstat *stat, struct skcipher_request *req, struct scatterlist sg, char *hash_key)

WARNING: Missing a blank line after declarations
#174: FILE: sys_cpenc.c:174:
+		mm_segment_t old_fs;
+		old_fs = get_fs();

WARNING: suspect code indent for conditional statements (16, 20)
#177: FILE: sys_cpenc.c:177:
+		if (bytes_read < 0) {
+		    retval = -EINTR;

WARNING: Statements should start on a tabstop
#180: FILE: sys_cpenc.c:180:
+		    return retval;

WARNING: suspect code indent for conditional statements (16, 20)
#182: FILE: sys_cpenc.c:182:
+		if (memcmp(data, hash_key, 16) != 0) {
+		    retval = -EACCES;

WARNING: Statements should start on a tabstop
#185: FILE: sys_cpenc.c:185:
+		    return retval;

WARNING: suspect code indent for conditional statements (16, 20)
#188: FILE: sys_cpenc.c:188:
+		if (bytes_read < 0) {
+		    retval = -EINTR;

WARNING: Statements should start on a tabstop
#191: FILE: sys_cpenc.c:191:
+		    return retval;

WARNING: suspect code indent for conditional statements (16, 20)
#194: FILE: sys_cpenc.c:194:
+		while (read_flag) {
+		    bytes_read = vfs_read(fd_in, data, BUF_SIZE, &fd_in->f_pos);

WARNING: Statements should start on a tabstop
#196: FILE: sys_cpenc.c:196:
+		    if (bytes_read < 0) {

WARNING: Statements should start on a tabstop
#200: FILE: sys_cpenc.c:200:
+		    }

WARNING: line over 80 characters
#202: FILE: sys_cpenc.c:202:
+		    skcipher_request_set_crypt(req, &sg, &sg, bytes_read, ivdata);

WARNING: Statements should start on a tabstop
#204: FILE: sys_cpenc.c:204:
+		    if (retval) {

WARNING: Statements should start on a tabstop
#207: FILE: sys_cpenc.c:207:
+		    }

WARNING: Statements should start on a tabstop
#208: FILE: sys_cpenc.c:208:
+		    if (bytes_read < BUF_SIZE) {

WARNING: braces {} are not necessary for single statement blocks
#208: FILE: sys_cpenc.c:208:
+		    if (bytes_read < BUF_SIZE) {
+			read_flag = false;
+		    }

WARNING: Statements should start on a tabstop
#210: FILE: sys_cpenc.c:210:
+		    }

WARNING: line over 80 characters
#211: FILE: sys_cpenc.c:211:
+		    bytes_write = vfs_write(fd_out, data, bytes_read, &fd_out->f_pos);

WARNING: Statements should start on a tabstop
#212: FILE: sys_cpenc.c:212:
+		    if (bytes_write != bytes_read) {

WARNING: Statements should start on a tabstop
#216: FILE: sys_cpenc.c:216:
+		    }

WARNING: suspect code indent for conditional statements (16, 20)
#219: FILE: sys_cpenc.c:219:
+		if (fd_out->f_pos != (stat->size - 32)) {
+		    printk(KERN_ERR "issue in writing in decryption \n");

WARNING: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#220: FILE: sys_cpenc.c:220:
+		    printk(KERN_ERR "issue in writing in decryption \n");

WARNING: unnecessary whitespace before a quoted newline
#220: FILE: sys_cpenc.c:220:
+		    printk(KERN_ERR "issue in writing in decryption \n");

WARNING: Statements should start on a tabstop
#222: FILE: sys_cpenc.c:222:
+		    return retval;

WARNING: line over 80 characters
#224: FILE: sys_cpenc.c:224:
+		printk("Output of file_read---> %ld  and fd_in->f_pos-----> %llu \n", bytes_write, fd_out->f_pos);

WARNING: printk() should include KERN_<LEVEL> facility level
#224: FILE: sys_cpenc.c:224:
+		printk("Output of file_read---> %ld  and fd_in->f_pos-----> %llu \n", bytes_write, fd_out->f_pos);

WARNING: unnecessary whitespace before a quoted newline
#224: FILE: sys_cpenc.c:224:
+		printk("Output of file_read---> %ld  and fd_in->f_pos-----> %llu \n", bytes_write, fd_out->f_pos);

WARNING: Block comments should align the * on each line
#230: FILE: sys_cpenc.c:230:
+/*
+		*set_uid_gid - setting the user id and group id of the process

WARNING: printk() should include KERN_<LEVEL> facility level
#236: FILE: sys_cpenc.c:236:
+		printk("current uid %d\n", current_uid().val);

WARNING: printk() should include KERN_<LEVEL> facility level
#237: FILE: sys_cpenc.c:237:
+		printk("current gid %d\n", current_gid().val);

WARNING: line over 80 characters
#244: FILE: sys_cpenc.c:244:
+		*check_inode -checking the inode of the input file and output file

WARNING: Block comments should align the * on each line
#244: FILE: sys_cpenc.c:244:
+/*
+		*check_inode -checking the inode of the input file and output file

WARNING: line over 80 characters
#252: FILE: sys_cpenc.c:252:
+		unsigned long inode_input = fd_in->f_path.dentry->d_inode->i_ino;

WARNING: line over 80 characters
#253: FILE: sys_cpenc.c:253:
+		unsigned long inode_output = fd_out->f_path.dentry->d_inode->i_ino;

WARNING: line over 80 characters
#254: FILE: sys_cpenc.c:254:
+		printk("Inode number of input file %lu\n", fd_in->f_path.dentry->d_inode->i_ino);

WARNING: Missing a blank line after declarations
#254: FILE: sys_cpenc.c:254:
+		unsigned long inode_output = fd_out->f_path.dentry->d_inode->i_ino;
+		printk("Inode number of input file %lu\n", fd_in->f_path.dentry->d_inode->i_ino);

WARNING: printk() should include KERN_<LEVEL> facility level
#254: FILE: sys_cpenc.c:254:
+		printk("Inode number of input file %lu\n", fd_in->f_path.dentry->d_inode->i_ino);

WARNING: line over 80 characters
#255: FILE: sys_cpenc.c:255:
+		printk("Inode number of output file %lu\n", fd_out->f_path.dentry->d_inode->i_ino);

WARNING: printk() should include KERN_<LEVEL> facility level
#255: FILE: sys_cpenc.c:255:
+		printk("Inode number of output file %lu\n", fd_out->f_path.dentry->d_inode->i_ino);

WARNING: suspect code indent for conditional statements (16, 20)
#256: FILE: sys_cpenc.c:256:
+		if (inode_input == inode_output) {
+		    printk(KERN_ERR "both files inode number match \n");

WARNING: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#257: FILE: sys_cpenc.c:257:
+		    printk(KERN_ERR "both files inode number match \n");

WARNING: unnecessary whitespace before a quoted newline
#257: FILE: sys_cpenc.c:257:
+		    printk(KERN_ERR "both files inode number match \n");

WARNING: Missing a blank line after declarations
#280: FILE: sys_cpenc.c:280:
+		myargs *k_arg;
+		k_arg = kmalloc(sizeof(myargs), GFP_KERNEL);

WARNING: suspect code indent for conditional statements (16, 20)
#281: FILE: sys_cpenc.c:281:
+		if (!k_arg) {
+		    printk(KERN_ERR "Unable to allocate memory.");

WARNING: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#282: FILE: sys_cpenc.c:282:
+		    printk(KERN_ERR "Unable to allocate memory.");

WARNING: Statements should start on a tabstop
#283: FILE: sys_cpenc.c:283:
+		    return -ENOMEM;

WARNING: suspect code indent for conditional statements (16, 20)
#285: FILE: sys_cpenc.c:285:
+		if (copy_from_user(k_arg, arg, sizeof(myargs))) {
+		    kfree(k_arg);

WARNING: Statements should start on a tabstop
#287: FILE: sys_cpenc.c:287:
+		    return -EFAULT;

WARNING: line over 80 characters
#290: FILE: sys_cpenc.c:290:
+		if ((k_arg->input == NULL) || (k_arg->output == NULL) || (k_arg->password == NULL) || (k_arg->flag == 0)) {

WARNING: suspect code indent for conditional statements (16, 20)
#290: FILE: sys_cpenc.c:290:
+		if ((k_arg->input == NULL) || (k_arg->output == NULL) || (k_arg->password == NULL) || (k_arg->flag == 0)) {
+		    printk("Invalid Arguments.\n");

WARNING: printk() should include KERN_<LEVEL> facility level
#291: FILE: sys_cpenc.c:291:
+		    printk("Invalid Arguments.\n");

WARNING: Statements should start on a tabstop
#293: FILE: sys_cpenc.c:293:
+		    return -EINVAL;

WARNING: suspect code indent for conditional statements (16, 20)
#297: FILE: sys_cpenc.c:297:
+		if (!(flag & 0x7)) {
+		    kfree(k_arg);

WARNING: Statements should start on a tabstop
#299: FILE: sys_cpenc.c:299:
+		    return -EINVAL;

WARNING: suspect code indent for conditional statements (16, 20)
#301: FILE: sys_cpenc.c:301:
+		if((!k_arg->input) || (!k_arg->output) || (!k_arg->password)) {
+		    printk("Missing arguments\n");

ERROR: space required before the open parenthesis '('
#301: FILE: sys_cpenc.c:301:
+		if((!k_arg->input) || (!k_arg->output) || (!k_arg->password)) {

WARNING: printk() should include KERN_<LEVEL> facility level
#302: FILE: sys_cpenc.c:302:
+		    printk("Missing arguments\n");

WARNING: Statements should start on a tabstop
#304: FILE: sys_cpenc.c:304:
+		    return -EINVAL;

WARNING: printk() should include KERN_<LEVEL> facility level
#306: FILE: sys_cpenc.c:306:
+		printk("flag %d",flag);

ERROR: space required after that ',' (ctx:VxV)
#306: FILE: sys_cpenc.c:306:
+		printk("flag %d",flag);
 		                ^

WARNING: printk() should include KERN_<LEVEL> facility level
#307: FILE: sys_cpenc.c:307:
+		printk("input %s", k_arg->input);

WARNING: printk() should include KERN_<LEVEL> facility level
#308: FILE: sys_cpenc.c:308:
+		printk("output %s", k_arg->output);

ERROR: trailing whitespace
#309: FILE: sys_cpenc.c:309:
+^I^I$

WARNING: suspect code indent for conditional statements (16, 20)
#313: FILE: sys_cpenc.c:313:
+		if (!hash_key) {
+		    printk(KERN_ERR "Unable to allocate memory.");

WARNING: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#314: FILE: sys_cpenc.c:314:
+		    printk(KERN_ERR "Unable to allocate memory.");

WARNING: Statements should start on a tabstop
#316: FILE: sys_cpenc.c:316:
+		    return -ENOMEM;

WARNING: printk() should include KERN_<LEVEL> facility level
#319: FILE: sys_cpenc.c:319:
+		printk("return val of MD5_hash\n");

WARNING: suspect code indent for conditional statements (16, 20)
#320: FILE: sys_cpenc.c:320:
+		if (retval != 0) {
+		    printk(KERN_ERR "error in hashing the user key\n");

WARNING: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#321: FILE: sys_cpenc.c:321:
+		    printk(KERN_ERR "error in hashing the user key\n");

WARNING: Statements should start on a tabstop
#324: FILE: sys_cpenc.c:324:
+		    return retval;

WARNING: line over 80 characters
#327: FILE: sys_cpenc.c:327:
+		/*Ensuring the filename which is passed from the user with getname*/

WARNING: suspect code indent for conditional statements (16, 20)
#329: FILE: sys_cpenc.c:329:
+		if (!file_in || IS_ERR(file_in)) {
+		    printk("ERROR in getname of input\n");

WARNING: printk() should include KERN_<LEVEL> facility level
#330: FILE: sys_cpenc.c:330:
+		    printk("ERROR in getname of input\n");

WARNING: Statements should start on a tabstop
#333: FILE: sys_cpenc.c:333:
+		    return PTR_ERR(file_in);

WARNING: suspect code indent for conditional statements (16, 20)
#336: FILE: sys_cpenc.c:336:
+		if (!file_out || IS_ERR(file_in)) {
+		    printk("ERROR in getname of output\n");

WARNING: printk() should include KERN_<LEVEL> facility level
#337: FILE: sys_cpenc.c:337:
+		    printk("ERROR in getname of output\n");

WARNING: Statements should start on a tabstop
#341: FILE: sys_cpenc.c:341:
+		    return PTR_ERR(file_out);

ERROR: trailing whitespace
#342: FILE: sys_cpenc.c:342:
+^I^I}   $

ERROR: trailing whitespace
#343: FILE: sys_cpenc.c:343:
+^I^Iprintk("working fine\n"); $

WARNING: printk() should include KERN_<LEVEL> facility level
#343: FILE: sys_cpenc.c:343:
+		printk("working fine\n"); 

ERROR: trailing whitespace
#344: FILE: sys_cpenc.c:344:
+^I^I$

WARNING: suspect code indent for conditional statements (16, 20)
#347: FILE: sys_cpenc.c:347:
+		if (!fd_in || IS_ERR(fd_in)) {
+		    printk("%ld\n", PTR_ERR(fd_in));

WARNING: printk() should include KERN_<LEVEL> facility level
#348: FILE: sys_cpenc.c:348:
+		    printk("%ld\n", PTR_ERR(fd_in));

WARNING: Statements should start on a tabstop
#353: FILE: sys_cpenc.c:353:
+		    return -ENOENT;

WARNING: line over 80 characters
#355: FILE: sys_cpenc.c:355:
+		printk("filp_open issue, %d flag %s %s\n", flag, file_in->name, file_out->name);

WARNING: printk() should include KERN_<LEVEL> facility level
#355: FILE: sys_cpenc.c:355:
+		printk("filp_open issue, %d flag %s %s\n", flag, file_in->name, file_out->name);

WARNING: line over 80 characters
#357: FILE: sys_cpenc.c:357:
+		if ((flag & 0x4) && (!S_ISREG(fd_in->f_path.dentry->d_inode->i_mode))) {

WARNING: suspect code indent for conditional statements (16, 20)
#357: FILE: sys_cpenc.c:357:
+		if ((flag & 0x4) && (!S_ISREG(fd_in->f_path.dentry->d_inode->i_mode))) {
+		    printk("Input is not a regular file");

WARNING: printk() should include KERN_<LEVEL> facility level
#358: FILE: sys_cpenc.c:358:
+		    printk("Input is not a regular file");

WARNING: Statements should start on a tabstop
#360: FILE: sys_cpenc.c:360:
+		    goto out_state;

WARNING: printk() should include KERN_<LEVEL> facility level
#362: FILE: sys_cpenc.c:362:
+		printk("checking whether it is regular file\n");

ERROR: trailing whitespace
#363: FILE: sys_cpenc.c:363:
+^I^I/*Ensuring the file open of output is proper*/ $

WARNING: suspect code indent for conditional statements (16, 20)
#365: FILE: sys_cpenc.c:365:
+		if (!fd_out || IS_ERR(fd_out)) {
+		    printk("%ld\n", PTR_ERR(fd_out));

WARNING: printk() should include KERN_<LEVEL> facility level
#366: FILE: sys_cpenc.c:366:
+		    printk("%ld\n", PTR_ERR(fd_out));

WARNING: Statements should start on a tabstop
#368: FILE: sys_cpenc.c:368:
+		    goto out_state;

WARNING: printk() should include KERN_<LEVEL> facility level
#370: FILE: sys_cpenc.c:370:
+		printk("checking output file\n");

WARNING: line over 80 characters
#372: FILE: sys_cpenc.c:372:
+		if ((flag & 0x4) && (!S_ISREG(fd_out->f_path.dentry->d_inode->i_mode))) {

WARNING: suspect code indent for conditional statements (16, 20)
#372: FILE: sys_cpenc.c:372:
+		if ((flag & 0x4) && (!S_ISREG(fd_out->f_path.dentry->d_inode->i_mode))) {
+		    printk("Output is not a regular file");

WARNING: printk() should include KERN_<LEVEL> facility level
#373: FILE: sys_cpenc.c:373:
+		    printk("Output is not a regular file");

WARNING: Statements should start on a tabstop
#375: FILE: sys_cpenc.c:375:
+		    goto out_state1;

WARNING: printk() should include KERN_<LEVEL> facility level
#377: FILE: sys_cpenc.c:377:
+		printk("checking output file--2\n");

WARNING: line over 80 characters
#378: FILE: sys_cpenc.c:378:
+		printk("Input file %s\n Output file %s\n", file_in->name, file_out->name);

WARNING: printk() should include KERN_<LEVEL> facility level
#378: FILE: sys_cpenc.c:378:
+		printk("Input file %s\n Output file %s\n", file_in->name, file_out->name);

WARNING: Block comments should align the * on each line
#382: FILE: sys_cpenc.c:382:
+		/*
+		* Checking whether both files are symbolic link

WARNING: suspect code indent for conditional statements (16, 20)
#389: FILE: sys_cpenc.c:389:
+		if (retval != 0) {
+		    printk("Both files are same.Inodes Match. Bad arguments. \n");

WARNING: printk() should include KERN_<LEVEL> facility level
#390: FILE: sys_cpenc.c:390:
+		    printk("Both files are same.Inodes Match. Bad arguments. \n");

WARNING: unnecessary whitespace before a quoted newline
#390: FILE: sys_cpenc.c:390:
+		    printk("Both files are same.Inodes Match. Bad arguments. \n");

WARNING: space prohibited before semicolon
#391: FILE: sys_cpenc.c:391:
+		    retval = -EINVAL ;

WARNING: Statements should start on a tabstop
#392: FILE: sys_cpenc.c:392:
+		    goto out_state1;

WARNING: line over 80 characters
#395: FILE: sys_cpenc.c:395:
+		fd_out->f_path.dentry->d_inode->i_mode = fd_in->f_path.dentry->d_inode->i_mode;

WARNING: suspect code indent for conditional statements (16, 20)
#397: FILE: sys_cpenc.c:397:
+		if (!data) {
+		    printk(KERN_ERR "Unable to allocate memory.");

WARNING: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#398: FILE: sys_cpenc.c:398:
+		    printk(KERN_ERR "Unable to allocate memory.");

WARNING: Statements should start on a tabstop
#400: FILE: sys_cpenc.c:400:
+		    goto out_state1;

WARNING: suspect code indent for conditional statements (16, 20)
#404: FILE: sys_cpenc.c:404:
+		if (!stat) {
+		    printk(KERN_ERR "Unable to allocate memory.");

WARNING: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#405: FILE: sys_cpenc.c:405:
+		    printk(KERN_ERR "Unable to allocate memory.");

WARNING: Possible unnecessary 'out of memory' message
#405: FILE: sys_cpenc.c:405:
+		if (!stat) {
+		    printk(KERN_ERR "Unable to allocate memory.");

WARNING: Statements should start on a tabstop
#407: FILE: sys_cpenc.c:407:
+		    goto out_state2;

WARNING: suspect code indent for conditional statements (16, 20)
#410: FILE: sys_cpenc.c:410:
+		if (i != 0) {
+		    retval = -EINTR;

WARNING: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#412: FILE: sys_cpenc.c:412:
+		    printk(KERN_ERR "error in vfs-stat");

WARNING: Statements should start on a tabstop
#413: FILE: sys_cpenc.c:413:
+		    goto out_state3;

WARNING: printk() should include KERN_<LEVEL> facility level
#415: FILE: sys_cpenc.c:415:
+		printk("size of input file  %lld\n", stat->size);

WARNING: suspect code indent for conditional statements (16, 20)
#419: FILE: sys_cpenc.c:419:
+		if (!ivdata) {
+		    printk(KERN_ERR "Unable to allocate memory.");

WARNING: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#420: FILE: sys_cpenc.c:420:
+		    printk(KERN_ERR "Unable to allocate memory.");

WARNING: Possible unnecessary 'out of memory' message
#420: FILE: sys_cpenc.c:420:
+		if (!ivdata) {
+		    printk(KERN_ERR "Unable to allocate memory.");

ERROR: spaces required around that '=' (ctx:VxO)
#421: FILE: sys_cpenc.c:421:
+		    retval=-ENOMEM;
 		          ^

ERROR: space required before that '-' (ctx:OxV)
#421: FILE: sys_cpenc.c:421:
+		    retval=-ENOMEM;
 		           ^

WARNING: Statements should start on a tabstop
#422: FILE: sys_cpenc.c:422:
+		    goto out_state3;

WARNING: printk() should include KERN_<LEVEL> facility level
#425: FILE: sys_cpenc.c:425:
+		printk("\nUSER key\n");

WARNING: suspect code indent for conditional statements (16, 20)
#426: FILE: sys_cpenc.c:426:
+		for(i = 0; i < 16; i++)
+		    printk(KERN_CONT "%02x", hash_key[i]);

ERROR: space required before the open parenthesis '('
#426: FILE: sys_cpenc.c:426:
+		for(i = 0; i < 16; i++)

WARNING: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#427: FILE: sys_cpenc.c:427:
+		    printk(KERN_CONT "%02x", hash_key[i]);

WARNING: Avoid logging continuation uses where feasible
#427: FILE: sys_cpenc.c:427:
+		    printk(KERN_CONT "%02x", hash_key[i]);

WARNING: line over 80 characters
#429: FILE: sys_cpenc.c:429:
+		/*Ensuring the crypto_alloc_skcipher & request handle allocation*/

WARNING: suspect code indent for conditional statements (16, 20)
#431: FILE: sys_cpenc.c:431:
+		if (IS_ERR(skcipher)) {
+		    printk("could not allocate skcipher handle\n");

WARNING: printk() should include KERN_<LEVEL> facility level
#432: FILE: sys_cpenc.c:432:
+		    printk("could not allocate skcipher handle\n");

WARNING: Statements should start on a tabstop
#434: FILE: sys_cpenc.c:434:
+		    goto out_state4;

WARNING: suspect code indent for conditional statements (16, 20)
#437: FILE: sys_cpenc.c:437:
+		if (!req) {
+		    printk("could not allocate skcipher request\n");

WARNING: printk() should include KERN_<LEVEL> facility level
#438: FILE: sys_cpenc.c:438:
+		    printk("could not allocate skcipher request\n");

WARNING: Statements should start on a tabstop
#440: FILE: sys_cpenc.c:440:
+		    goto out_state5;

WARNING: suspect code indent for conditional statements (16, 20)
#442: FILE: sys_cpenc.c:442:
+		if (crypto_skcipher_setkey(skcipher, hash_key, 16)) {
+		    printk("key could not be set\n");

WARNING: printk() should include KERN_<LEVEL> facility level
#443: FILE: sys_cpenc.c:443:
+		    printk("key could not be set\n");

WARNING: Statements should start on a tabstop
#445: FILE: sys_cpenc.c:445:
+		    goto out_state6;

WARNING: suspect code indent for conditional statements (16, 20)
#449: FILE: sys_cpenc.c:449:
+		if (flag & 0x1) {
+		    retval = encrypt_fs(fd_in, fd_out,data, stat, req, sg, hash_key, ivdata);

WARNING: line over 80 characters
#450: FILE: sys_cpenc.c:450:
+		    retval = encrypt_fs(fd_in, fd_out,data, stat, req, sg, hash_key, ivdata);

ERROR: space required after that ',' (ctx:VxV)
#450: FILE: sys_cpenc.c:450:
+		    retval = encrypt_fs(fd_in, fd_out,data, stat, req, sg, hash_key, ivdata);
 		                                     ^

WARNING: Statements should start on a tabstop
#451: FILE: sys_cpenc.c:451:
+		    if (retval != 0)

WARNING: printk() should include KERN_<LEVEL> facility level
#452: FILE: sys_cpenc.c:452:
+			printk("error during encryption\n");

WARNING: suspect code indent for conditional statements (16, 20)
#454: FILE: sys_cpenc.c:454:
+		else if (flag & 0x2) {
+		    retval = decrypt_fs(fd_in, fd_out,data, stat, req, sg, hash_key);

ERROR: else should follow close brace '}'
#454: FILE: sys_cpenc.c:454:
+		}
+		else if (flag & 0x2) {

WARNING: line over 80 characters
#455: FILE: sys_cpenc.c:455:
+		    retval = decrypt_fs(fd_in, fd_out,data, stat, req, sg, hash_key);

ERROR: space required after that ',' (ctx:VxV)
#455: FILE: sys_cpenc.c:455:
+		    retval = decrypt_fs(fd_in, fd_out,data, stat, req, sg, hash_key);
 		                                     ^

WARNING: Statements should start on a tabstop
#456: FILE: sys_cpenc.c:456:
+		    if (retval != 0)

WARNING: printk() should include KERN_<LEVEL> facility level
#457: FILE: sys_cpenc.c:457:
+			printk("error during decryption\n");

WARNING: suspect code indent for conditional statements (16, 20)
#459: FILE: sys_cpenc.c:459:
+		else if (flag & 0x4) {
+		    retval = copy_fs(fd_in, fd_out, data,stat);

ERROR: else should follow close brace '}'
#459: FILE: sys_cpenc.c:459:
+		}
+		else if (flag & 0x4) {

ERROR: space required after that ',' (ctx:VxV)
#460: FILE: sys_cpenc.c:460:
+		    retval = copy_fs(fd_in, fd_out, data,stat);
 		                                        ^

WARNING: Statements should start on a tabstop
#461: FILE: sys_cpenc.c:461:
+		    if (retval != 0)

WARNING: printk() should include KERN_<LEVEL> facility level
#462: FILE: sys_cpenc.c:462:
+			printk("error during copy \n");

WARNING: unnecessary whitespace before a quoted newline
#462: FILE: sys_cpenc.c:462:
+			printk("error during copy \n");

WARNING: Block comments should align the * on each line
#465: FILE: sys_cpenc.c:465:
+		/*
+		* Cleaning the state and filp_open

WARNING: line over 80 characters
#468: FILE: sys_cpenc.c:468:
+		*Removing the output file incase if the file is partially written

WARNING: labels should not be indented
#470: FILE: sys_cpenc.c:470:
+		out_state6:

WARNING: labels should not be indented
#472: FILE: sys_cpenc.c:472:
+		out_state5:

WARNING: labels should not be indented
#474: FILE: sys_cpenc.c:474:
+		out_state4:

WARNING: labels should not be indented
#476: FILE: sys_cpenc.c:476:
+		out_state3:

WARNING: labels should not be indented
#478: FILE: sys_cpenc.c:478:
+		out_state2:

WARNING: labels should not be indented
#480: FILE: sys_cpenc.c:480:
+		out_state1:

WARNING: suspect code indent for conditional statements (16, 20)
#482: FILE: sys_cpenc.c:482:
+		if ((retval != -EINVAL) && (retval != 0)) {
+		    unlink_val = vfs_unlink(fd_out->f_path.dentry->d_parent->d_inode, fd_out->f_path.dentry, NULL);

WARNING: line over 80 characters
#483: FILE: sys_cpenc.c:483:
+		    unlink_val = vfs_unlink(fd_out->f_path.dentry->d_parent->d_inode, fd_out->f_path.dentry, NULL);

WARNING: Statements should start on a tabstop
#484: FILE: sys_cpenc.c:484:
+		    if(unlink_val != 0) {

ERROR: space required before the open parenthesis '('
#484: FILE: sys_cpenc.c:484:
+		    if(unlink_val != 0) {

WARNING: braces {} are not necessary for single statement blocks
#484: FILE: sys_cpenc.c:484:
+		    if(unlink_val != 0) {
+			printk("error in deleting the file\n");
+		    }

WARNING: printk() should include KERN_<LEVEL> facility level
#485: FILE: sys_cpenc.c:485:
+			printk("error in deleting the file\n");

WARNING: Statements should start on a tabstop
#486: FILE: sys_cpenc.c:486:
+		    }

WARNING: labels should not be indented
#488: FILE: sys_cpenc.c:488:
+		out_state:

WARNING: suspect code indent for conditional statements (16, 20)
#495: FILE: sys_cpenc.c:495:
+		if (arg == NULL)
+		    return -EINVAL;

WARNING: Statements should start on a tabstop
#496: FILE: sys_cpenc.c:496:
+		    return -EINVAL;

WARNING: suspect code indent for conditional statements (16, 20)
#497: FILE: sys_cpenc.c:497:
+		else
+		    return 0;

WARNING: Statements should start on a tabstop
#498: FILE: sys_cpenc.c:498:
+		    return 0;

WARNING: printk() should include KERN_<LEVEL> facility level
#503: FILE: sys_cpenc.c:503:
+		printk("installed new sys_cpenc module\n");

WARNING: suspect code indent for conditional statements (16, 20)
#504: FILE: sys_cpenc.c:504:
+		if (sysptr == NULL)
+		    sysptr = cpenc;

WARNING: suspect code indent for conditional statements (16, 20)
#510: FILE: sys_cpenc.c:510:
+		if (sysptr != NULL)
+		    sysptr = NULL;

WARNING: printk() should include KERN_<LEVEL> facility level
#512: FILE: sys_cpenc.c:512:
+		printk("removed sys_cpenc module\n");

total: 21 errors, 229 warnings, 516 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

sys_cpenc.c has style problems, please review.
-------
patch14
-------
ERROR: trailing whitespace
#630: FILE: patch14:630:
++^I^Iprintk("working fine\n"); $

total: 1 errors, 0 warnings, 1102 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

patch14 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
